{
  "address": "0xb2A61B911f993c6505D9e99C1e8606B7EA3866E8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract VolcanoCoin",
          "name": "_volcanoCoin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x868a8b686a5d20056e4d13e2358346ed4475f68310de12567d5da507aa878ad1",
  "receipt": {
    "to": null,
    "from": "0x36efd039149b9F5aF6aC75d85A8d3e9088bc7d4f",
    "contractAddress": "0xb2A61B911f993c6505D9e99C1e8606B7EA3866E8",
    "transactionIndex": 96,
    "gasUsed": "2251665",
    "logsBloom": "0x00000000000000000000000000000000000000004000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000024000000001000000000800000000000000000000000000100000400000000080000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8e198e9c3e13b69f1c967ef70637ec606108e2ff4a79ba649ee929594987e555",
    "transactionHash": "0x868a8b686a5d20056e4d13e2358346ed4475f68310de12567d5da507aa878ad1",
    "logs": [
      {
        "transactionIndex": 96,
        "blockNumber": 7930531,
        "transactionHash": "0x868a8b686a5d20056e4d13e2358346ed4475f68310de12567d5da507aa878ad1",
        "address": "0xb2A61B911f993c6505D9e99C1e8606B7EA3866E8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000036efd039149b9f5af6ac75d85a8d3e9088bc7d4f"
        ],
        "data": "0x",
        "logIndex": 215,
        "blockHash": "0x8e198e9c3e13b69f1c967ef70637ec606108e2ff4a79ba649ee929594987e555"
      }
    ],
    "blockNumber": 7930531,
    "cumulativeGasUsed": "20938242",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91aCD3D1fd81CC784209Fb5dCc86aACE901516ef"
  ],
  "numDeployments": 1,
  "solcInputHash": "d8b3a975e429c67bd4d5faab25cfb3a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract VolcanoCoin\",\"name\":\"_volcanoCoin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VolcanoNFT.sol\":\"VolcanoNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/EllipticCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n\\n/**\\n * @title Elliptic Curve Library\\n * @dev Library providing arithmetic operations over elliptic curves.\\n * This library does not check whether the inserted points belong to the curve\\n * `isOnCurve` function should be used by the library user to check the aforementioned statement.\\n * @author Witnet Foundation\\n */\\nlibrary EllipticCurve {\\n\\n  // Pre-computed constant for 2 ** 255\\n  uint256 constant private U255_MAX_PLUS_1 = 57896044618658097711785492504343953926634992332820282019728792003956564819968;\\n\\n  /// @dev Modular euclidean inverse of a number (mod p).\\n  /// @param _x The number\\n  /// @param _pp The modulus\\n  /// @return q such that x*q = 1 (mod _pp)\\n  function invMod(uint256 _x, uint256 _pp) internal pure returns (uint256) {\\n    require(_x != 0 && _x != _pp && _pp != 0, \\\"Invalid number\\\");\\n    uint256 q = 0;\\n    uint256 newT = 1;\\n    uint256 r = _pp;\\n    uint256 t;\\n    while (_x != 0) {\\n      t = r / _x;\\n      (q, newT) = (newT, addmod(q, (_pp - mulmod(t, newT, _pp)), _pp));\\n      (r, _x) = (_x, r - t * _x);\\n    }\\n\\n    return q;\\n  }\\n\\n  /// @dev Modular exponentiation, b^e % _pp.\\n  /// Source: https://github.com/androlo/standard-contracts/blob/master/contracts/src/crypto/ECCMath.sol\\n  /// @param _base base\\n  /// @param _exp exponent\\n  /// @param _pp modulus\\n  /// @return r such that r = b**e (mod _pp)\\n  function expMod(uint256 _base, uint256 _exp, uint256 _pp) internal pure returns (uint256) {\\n    require(_pp!=0, \\\"Modulus is zero\\\");\\n\\n    if (_base == 0)\\n      return 0;\\n    if (_exp == 0)\\n      return 1;\\n\\n    uint256 r = 1;\\n    uint256 bit = U255_MAX_PLUS_1;\\n    assembly {\\n      for { } gt(bit, 0) { }{\\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, bit)))), _pp)\\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, div(bit, 2))))), _pp)\\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, div(bit, 4))))), _pp)\\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, div(bit, 8))))), _pp)\\n        bit := div(bit, 16)\\n      }\\n    }\\n\\n    return r;\\n  }\\n\\n  /// @dev Converts a point (x, y, z) expressed in Jacobian coordinates to affine coordinates (x', y', 1).\\n  /// @param _x coordinate x\\n  /// @param _y coordinate y\\n  /// @param _z coordinate z\\n  /// @param _pp the modulus\\n  /// @return (x', y') affine coordinates\\n  function toAffine(\\n    uint256 _x,\\n    uint256 _y,\\n    uint256 _z,\\n    uint256 _pp)\\n  internal pure returns (uint256, uint256)\\n  {\\n    uint256 zInv = invMod(_z, _pp);\\n    uint256 zInv2 = mulmod(zInv, zInv, _pp);\\n    uint256 x2 = mulmod(_x, zInv2, _pp);\\n    uint256 y2 = mulmod(_y, mulmod(zInv, zInv2, _pp), _pp);\\n\\n    return (x2, y2);\\n  }\\n\\n  /// @dev Derives the y coordinate from a compressed-format point x [[SEC-1]](https://www.secg.org/SEC1-Ver-1.0.pdf).\\n  /// @param _prefix parity byte (0x02 even, 0x03 odd)\\n  /// @param _x coordinate x\\n  /// @param _aa constant of curve\\n  /// @param _bb constant of curve\\n  /// @param _pp the modulus\\n  /// @return y coordinate y\\n  function deriveY(\\n    uint8 _prefix,\\n    uint256 _x,\\n    uint256 _aa,\\n    uint256 _bb,\\n    uint256 _pp)\\n  internal pure returns (uint256)\\n  {\\n    require(_prefix == 0x02 || _prefix == 0x03, \\\"Invalid compressed EC point prefix\\\");\\n\\n    // x^3 + ax + b\\n    uint256 y2 = addmod(mulmod(_x, mulmod(_x, _x, _pp), _pp), addmod(mulmod(_x, _aa, _pp), _bb, _pp), _pp);\\n    y2 = expMod(y2, (_pp + 1) / 4, _pp);\\n    // uint256 cmp = yBit ^ y_ & 1;\\n    uint256 y = (y2 + _prefix) % 2 == 0 ? y2 : _pp - y2;\\n\\n    return y;\\n  }\\n\\n  /// @dev Check whether point (x,y) is on curve defined by a, b, and _pp.\\n  /// @param _x coordinate x of P1\\n  /// @param _y coordinate y of P1\\n  /// @param _aa constant of curve\\n  /// @param _bb constant of curve\\n  /// @param _pp the modulus\\n  /// @return true if x,y in the curve, false else\\n  function isOnCurve(\\n    uint _x,\\n    uint _y,\\n    uint _aa,\\n    uint _bb,\\n    uint _pp)\\n  internal pure returns (bool)\\n  {\\n    if (0 == _x || _x >= _pp || 0 == _y || _y >= _pp) {\\n      return false;\\n    }\\n    // y^2\\n    uint lhs = mulmod(_y, _y, _pp);\\n    // x^3\\n    uint rhs = mulmod(mulmod(_x, _x, _pp), _x, _pp);\\n    if (_aa != 0) {\\n      // x^3 + a*x\\n      rhs = addmod(rhs, mulmod(_x, _aa, _pp), _pp);\\n    }\\n    if (_bb != 0) {\\n      // x^3 + a*x + b\\n      rhs = addmod(rhs, _bb, _pp);\\n    }\\n\\n    return lhs == rhs;\\n  }\\n\\n  /// @dev Calculate inverse (x, -y) of point (x, y).\\n  /// @param _x coordinate x of P1\\n  /// @param _y coordinate y of P1\\n  /// @param _pp the modulus\\n  /// @return (x, -y)\\n  function ecInv(\\n    uint256 _x,\\n    uint256 _y,\\n    uint256 _pp)\\n  internal pure returns (uint256, uint256)\\n  {\\n    return (_x, (_pp - _y) % _pp);\\n  }\\n\\n  /// @dev Add two points (x1, y1) and (x2, y2) in affine coordinates.\\n  /// @param _x1 coordinate x of P1\\n  /// @param _y1 coordinate y of P1\\n  /// @param _x2 coordinate x of P2\\n  /// @param _y2 coordinate y of P2\\n  /// @param _aa constant of the curve\\n  /// @param _pp the modulus\\n  /// @return (qx, qy) = P1+P2 in affine coordinates\\n  function ecAdd(\\n    uint256 _x1,\\n    uint256 _y1,\\n    uint256 _x2,\\n    uint256 _y2,\\n    uint256 _aa,\\n    uint256 _pp)\\n    internal pure returns(uint256, uint256)\\n  {\\n    uint x = 0;\\n    uint y = 0;\\n    uint z = 0;\\n\\n    // Double if x1==x2 else add\\n    if (_x1==_x2) {\\n      // y1 = -y2 mod p\\n      if (addmod(_y1, _y2, _pp) == 0) {\\n        return(0, 0);\\n      } else {\\n        // P1 = P2\\n        (x, y, z) = jacDouble(\\n          _x1,\\n          _y1,\\n          1,\\n          _aa,\\n          _pp);\\n      }\\n    } else {\\n      (x, y, z) = jacAdd(\\n        _x1,\\n        _y1,\\n        1,\\n        _x2,\\n        _y2,\\n        1,\\n        _pp);\\n    }\\n    // Get back to affine\\n    return toAffine(\\n      x,\\n      y,\\n      z,\\n      _pp);\\n  }\\n\\n  /// @dev Substract two points (x1, y1) and (x2, y2) in affine coordinates.\\n  /// @param _x1 coordinate x of P1\\n  /// @param _y1 coordinate y of P1\\n  /// @param _x2 coordinate x of P2\\n  /// @param _y2 coordinate y of P2\\n  /// @param _aa constant of the curve\\n  /// @param _pp the modulus\\n  /// @return (qx, qy) = P1-P2 in affine coordinates\\n  function ecSub(\\n    uint256 _x1,\\n    uint256 _y1,\\n    uint256 _x2,\\n    uint256 _y2,\\n    uint256 _aa,\\n    uint256 _pp)\\n  internal pure returns(uint256, uint256)\\n  {\\n    // invert square\\n    (uint256 x, uint256 y) = ecInv(_x2, _y2, _pp);\\n    // P1-square\\n    return ecAdd(\\n      _x1,\\n      _y1,\\n      x,\\n      y,\\n      _aa,\\n      _pp);\\n  }\\n\\n  /// @dev Multiply point (x1, y1, z1) times d in affine coordinates.\\n  /// @param _k scalar to multiply\\n  /// @param _x coordinate x of P1\\n  /// @param _y coordinate y of P1\\n  /// @param _aa constant of the curve\\n  /// @param _pp the modulus\\n  /// @return (qx, qy) = d*P in affine coordinates\\n  function ecMul(\\n    uint256 _k,\\n    uint256 _x,\\n    uint256 _y,\\n    uint256 _aa,\\n    uint256 _pp)\\n  internal pure returns(uint256, uint256)\\n  {\\n    // Jacobian multiplication\\n    (uint256 x1, uint256 y1, uint256 z1) = jacMul(\\n      _k,\\n      _x,\\n      _y,\\n      1,\\n      _aa,\\n      _pp);\\n    // Get back to affine\\n    return toAffine(\\n      x1,\\n      y1,\\n      z1,\\n      _pp);\\n  }\\n\\n  /// @dev Adds two points (x1, y1, z1) and (x2 y2, z2).\\n  /// @param _x1 coordinate x of P1\\n  /// @param _y1 coordinate y of P1\\n  /// @param _z1 coordinate z of P1\\n  /// @param _x2 coordinate x of square\\n  /// @param _y2 coordinate y of square\\n  /// @param _z2 coordinate z of square\\n  /// @param _pp the modulus\\n  /// @return (qx, qy, qz) P1+square in Jacobian\\n  function jacAdd(\\n    uint256 _x1,\\n    uint256 _y1,\\n    uint256 _z1,\\n    uint256 _x2,\\n    uint256 _y2,\\n    uint256 _z2,\\n    uint256 _pp)\\n  internal pure returns (uint256, uint256, uint256)\\n  {\\n    if (_x1==0 && _y1==0)\\n      return (_x2, _y2, _z2);\\n    if (_x2==0 && _y2==0)\\n      return (_x1, _y1, _z1);\\n\\n    // We follow the equations described in https://pdfs.semanticscholar.org/5c64/29952e08025a9649c2b0ba32518e9a7fb5c2.pdf Section 5\\n    uint[4] memory zs; // z1^2, z1^3, z2^2, z2^3\\n    zs[0] = mulmod(_z1, _z1, _pp);\\n    zs[1] = mulmod(_z1, zs[0], _pp);\\n    zs[2] = mulmod(_z2, _z2, _pp);\\n    zs[3] = mulmod(_z2, zs[2], _pp);\\n\\n    // u1, s1, u2, s2\\n    zs = [\\n      mulmod(_x1, zs[2], _pp),\\n      mulmod(_y1, zs[3], _pp),\\n      mulmod(_x2, zs[0], _pp),\\n      mulmod(_y2, zs[1], _pp)\\n    ];\\n\\n    // In case of zs[0] == zs[2] && zs[1] == zs[3], double function should be used\\n    require(zs[0] != zs[2] || zs[1] != zs[3], \\\"Use jacDouble function instead\\\");\\n\\n    uint[4] memory hr;\\n    //h\\n    hr[0] = addmod(zs[2], _pp - zs[0], _pp);\\n    //r\\n    hr[1] = addmod(zs[3], _pp - zs[1], _pp);\\n    //h^2\\n    hr[2] = mulmod(hr[0], hr[0], _pp);\\n    // h^3\\n    hr[3] = mulmod(hr[2], hr[0], _pp);\\n    // qx = -h^3  -2u1h^2+r^2\\n    uint256 qx = addmod(mulmod(hr[1], hr[1], _pp), _pp - hr[3], _pp);\\n    qx = addmod(qx, _pp - mulmod(2, mulmod(zs[0], hr[2], _pp), _pp), _pp);\\n    // qy = -s1*z1*h^3+r(u1*h^2 -x^3)\\n    uint256 qy = mulmod(hr[1], addmod(mulmod(zs[0], hr[2], _pp), _pp - qx, _pp), _pp);\\n    qy = addmod(qy, _pp - mulmod(zs[1], hr[3], _pp), _pp);\\n    // qz = h*z1*z2\\n    uint256 qz = mulmod(hr[0], mulmod(_z1, _z2, _pp), _pp);\\n    return(qx, qy, qz);\\n  }\\n\\n  /// @dev Doubles a points (x, y, z).\\n  /// @param _x coordinate x of P1\\n  /// @param _y coordinate y of P1\\n  /// @param _z coordinate z of P1\\n  /// @param _aa the a scalar in the curve equation\\n  /// @param _pp the modulus\\n  /// @return (qx, qy, qz) 2P in Jacobian\\n  function jacDouble(\\n    uint256 _x,\\n    uint256 _y,\\n    uint256 _z,\\n    uint256 _aa,\\n    uint256 _pp)\\n  internal pure returns (uint256, uint256, uint256)\\n  {\\n    if (_z == 0)\\n      return (_x, _y, _z);\\n\\n    // We follow the equations described in https://pdfs.semanticscholar.org/5c64/29952e08025a9649c2b0ba32518e9a7fb5c2.pdf Section 5\\n    // Note: there is a bug in the paper regarding the m parameter, M=3*(x1^2)+a*(z1^4)\\n    // x, y, z at this point represent the squares of _x, _y, _z\\n    uint256 x = mulmod(_x, _x, _pp); //x1^2\\n    uint256 y = mulmod(_y, _y, _pp); //y1^2\\n    uint256 z = mulmod(_z, _z, _pp); //z1^2\\n\\n    // s\\n    uint s = mulmod(4, mulmod(_x, y, _pp), _pp);\\n    // m\\n    uint m = addmod(mulmod(3, x, _pp), mulmod(_aa, mulmod(z, z, _pp), _pp), _pp);\\n\\n    // x, y, z at this point will be reassigned and rather represent qx, qy, qz from the paper\\n    // This allows to reduce the gas cost and stack footprint of the algorithm\\n    // qx\\n    x = addmod(mulmod(m, m, _pp), _pp - addmod(s, s, _pp), _pp);\\n    // qy = -8*y1^4 + M(S-T)\\n    y = addmod(mulmod(m, addmod(s, _pp - x, _pp), _pp), _pp - mulmod(8, mulmod(y, y, _pp), _pp), _pp);\\n    // qz = 2*y1*z1\\n    z = mulmod(2, mulmod(_y, _z, _pp), _pp);\\n\\n    return (x, y, z);\\n  }\\n\\n  /// @dev Multiply point (x, y, z) times d.\\n  /// @param _d scalar to multiply\\n  /// @param _x coordinate x of P1\\n  /// @param _y coordinate y of P1\\n  /// @param _z coordinate z of P1\\n  /// @param _aa constant of curve\\n  /// @param _pp the modulus\\n  /// @return (qx, qy, qz) d*P1 in Jacobian\\n  function jacMul(\\n    uint256 _d,\\n    uint256 _x,\\n    uint256 _y,\\n    uint256 _z,\\n    uint256 _aa,\\n    uint256 _pp)\\n  internal pure returns (uint256, uint256, uint256)\\n  {\\n    // Early return in case that `_d == 0`\\n    if (_d == 0) {\\n      return (_x, _y, _z);\\n    }\\n\\n    uint256 remaining = _d;\\n    uint256 qx = 0;\\n    uint256 qy = 0;\\n    uint256 qz = 1;\\n\\n    // Double and add algorithm\\n    while (remaining != 0) {\\n      if ((remaining & 1) != 0) {\\n        (qx, qy, qz) = jacAdd(\\n          qx,\\n          qy,\\n          qz,\\n          _x,\\n          _y,\\n          _z,\\n          _pp);\\n      }\\n      remaining = remaining / 2;\\n      (_x, _y, _z) = jacDouble(\\n        _x,\\n        _y,\\n        _z,\\n        _aa,\\n        _pp);\\n    }\\n    return (qx, qy, qz);\\n  }\\n}\\n\",\"keccak256\":\"0x77333f556fa4a284801db3ec524be60c3c075d5e0187e306b028d325103d834b\",\"license\":\"MIT\"},\"contracts/VolcanoCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract VolcanoCoin is ERC20 {\\n    constructor() ERC20(\\\"Volcano Coin\\\", \\\"LAVACOIN\\\") {\\n        _mint(msg.sender, 1000 ether);\\n    }\\n}\",\"keccak256\":\"0x917ea0865e7b7891db158d5b4d25f9cc8472dae2048651cfd4a8e823634dbe4b\",\"license\":\"MIT\"},\"contracts/VolcanoNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./EllipticCurve.sol\\\";\\nimport \\\"./VolcanoCoin.sol\\\";\\n\\ncontract VolcanoNFT is ERC721, Ownable {\\n  \\n  Counters.Counter tokenIdCounter;\\n  using Counters for Counters.Counter;\\n\\n  struct Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  uint256 constant NUM_POLYS = 20;\\n  uint256 constant NUM_POINTS_PER_POLY = 3;\\n  uint256 constant ETH_MINT_PRICE = 0.001 ether;\\n  uint256 constant VOLCANOCOIN_MINT_PRICE = 1 ether; // Not actual ether, just used to multiply by 10^decimals()\\n\\n  VolcanoCoin private immutable volcanoCoin;\\n\\n  constructor(VolcanoCoin _volcanoCoin) ERC721(\\\"Volcano NFT\\\", \\\"LAVA\\\") {\\n    volcanoCoin = _volcanoCoin;\\n  }\\n\\n  function mint() public payable returns (uint256) {\\n    if (msg.value < ETH_MINT_PRICE) {\\n      require(\\n        volcanoCoin.transferFrom(msg.sender, address(this), VOLCANOCOIN_MINT_PRICE),\\n        \\\"Mint price is either 0.001 ETH or 1 LAVACOIN\\\"\\n      );\\n    }\\n\\n    tokenIdCounter.increment();\\n    uint256 tokenId = tokenIdCounter.current();\\n    _safeMint(msg.sender, tokenId);\\n\\n    return tokenId;\\n  }\\n\\n  function withdraw() public onlyOwner returns (bool success) {\\n    (success,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n    require(success, \\\"Withdraw failed\\\");\\n  }\\n\\n  function multiply(uint256 x, uint256 y, uint256 k) private pure returns (uint256, uint256) {\\n    return EllipticCurve.ecMul(\\n      k,\\n      x,\\n      y,\\n      777,\\n      997\\n    );\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    _requireMinted(tokenId);\\n\\n    Point[] memory points = new Point[](NUM_POLYS * NUM_POINTS_PER_POLY);\\n\\n    (uint256 randX, uint256 randY) = multiply(tokenId, 888, 777);\\n\\n    for (uint256 i = 1; i <= NUM_POLYS * 3; i++) {\\n      (uint256 pX, uint256 pY) = multiply(randX, randY, i);\\n      points[i - 1] = Point({ x: pX, y: pY });\\n    }\\n\\n    string memory allPolys = \\\"\\\";\\n    for (uint256 i = 0; i < NUM_POLYS; i++) {\\n      string memory coordinates = \\\"\\\";\\n      for (uint256 j = 0; j < NUM_POINTS_PER_POLY; j++) {\\n        coordinates = string(abi.encodePacked(coordinates, Strings.toString(points[i * NUM_POINTS_PER_POLY + j].x), ',', Strings.toString(points[i * NUM_POINTS_PER_POLY + j].y), ','));\\n      }\\n      allPolys = string(abi.encodePacked(allPolys, \\\"<polygon points='\\\", coordinates, \\\"' fill='hsla(\\\", Strings.toString(points[i * NUM_POINTS_PER_POLY].x % 59), \\\",100%,\\\", Strings.toString((points[i * NUM_POINTS_PER_POLY].x % 20) + 50), \\\"%,0.5)' stroke='none' />\\\"));\\n    }\\n\\n    string memory svgImage = string(\\n      abi.encodePacked(\\n        '<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>',\\n        '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"350px\\\" height=\\\"350px\\\" viewBox=\\\"0 0 997 997\\\" style=\\\"background-color:#fff\\\">',\\n          allPolys,\\n        '</svg>'\\n      )\\n    );\\n\\n    string memory base64Image = Base64.encode(bytes(svgImage));\\n\\n    // https://github.com/karooolis/placeholder-nft/blob/main/contracts/contracts/PlaceholderNFTERC721.sol\\n    string memory metadata = Base64.encode(\\n      bytes(\\n        string(\\n          abi.encodePacked(\\n            '{\\\"name\\\": \\\"',\\n            string(\\n                abi.encodePacked(\\n                    \\\"Volcano NFT #\\\",\\n                    Strings.toString(tokenId)\\n                )\\n            ),\\n            '\\\", \\\"attributes\\\": [], \\\"description\\\": \\\"Volcano NFTs are randomly generated images of an erupting volcano!\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', base64Image, '\\\"}'\\n          )\\n        )\\n      )\\n    );\\n\\n    return string(abi.encodePacked(\\\"data:application/json;base64,\\\", metadata));\\n  }\\n}\",\"keccak256\":\"0x32ce23c5453fcb37b67b09210e188996fc83132619c34e917c624eb08ceb5300\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200292b3803806200292b83398101604081905262000034916200011a565b6040518060400160405280600b81526020016a159bdb18d85b9bc813919560aa1b815250604051806040016040528060048152602001634c41564160e01b8152508160009081620000869190620001f1565b506001620000958282620001f1565b505050620000b2620000ac620000c460201b60201c565b620000c8565b6001600160a01b0316608052620002bd565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200012d57600080fd5b81516001600160a01b03811681146200014557600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200017757607f821691505b6020821081036200019857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001ec57600081815260208120601f850160051c81016020861015620001c75750805b601f850160051c820191505b81811015620001e857828155600101620001d3565b5050505b505050565b81516001600160401b038111156200020d576200020d6200014c565b62000225816200021e845462000162565b846200019e565b602080601f8311600181146200025d5760008415620002445750858301515b600019600386901b1c1916600185901b178555620001e8565b600085815260208120601f198616915b828110156200028e578886015182559484019460019091019084016200026d565b5085821015620002ad5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051612652620002d960003960006105b101526126526000f3fe6080604052600436106101095760003560e01c806370a0823111610095578063a22cb46511610064578063a22cb465146102b2578063b88d4fde146102d2578063c87b56dd146102f2578063e985e9c514610312578063f2fde38b1461033257600080fd5b806370a082311461024a578063715018a61461026a5780638da5cb5b1461027f57806395d89b411461029d57600080fd5b80631249c58b116100dc5780631249c58b146101bf57806323b872dd146101d55780633ccfd60b146101f557806342842e0e1461020a5780636352211e1461022a57600080fd5b806301ffc9a71461010e57806306fdde0314610143578063081812fc14610165578063095ea7b31461019d575b600080fd5b34801561011a57600080fd5b5061012e610129366004611d52565b610352565b60405190151581526020015b60405180910390f35b34801561014f57600080fd5b506101586103a4565b60405161013a9190611dc6565b34801561017157600080fd5b50610185610180366004611dd9565b610436565b6040516001600160a01b03909116815260200161013a565b3480156101a957600080fd5b506101bd6101b8366004611e09565b61045d565b005b6101c7610577565b60405190815260200161013a565b3480156101e157600080fd5b506101bd6101f0366004611e33565b6106b1565b34801561020157600080fd5b5061012e6106e2565b34801561021657600080fd5b506101bd610225366004611e33565b610779565b34801561023657600080fd5b50610185610245366004611dd9565b610794565b34801561025657600080fd5b506101c7610265366004611e6f565b6107f4565b34801561027657600080fd5b506101bd61087a565b34801561028b57600080fd5b506006546001600160a01b0316610185565b3480156102a957600080fd5b5061015861088e565b3480156102be57600080fd5b506101bd6102cd366004611e98565b61089d565b3480156102de57600080fd5b506101bd6102ed366004611ee5565b6108ac565b3480156102fe57600080fd5b5061015861030d366004611dd9565b6108e4565b34801561031e57600080fd5b5061012e61032d366004611fc1565b610c3c565b34801561033e57600080fd5b506101bd61034d366004611e6f565b610c6a565b60006001600160e01b031982166380ac58cd60e01b148061038357506001600160e01b03198216635b5e139f60e01b145b8061039e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103b390611ff4565b80601f01602080910402602001604051908101604052809291908181526020018280546103df90611ff4565b801561042c5780601f106104015761010080835404028352916020019161042c565b820191906000526020600020905b81548152906001019060200180831161040f57829003601f168201915b5050505050905090565b600061044182610ce3565b506000908152600460205260409020546001600160a01b031690565b600061046882610794565b9050806001600160a01b0316836001600160a01b0316036104da5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104f657506104f68133610c3c565b6105685760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016104d1565b6105728383610d42565b505050565b600066038d7ea4c68000341015610687576040516323b872dd60e01b8152336004820152306024820152670de0b6b3a764000060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610626919061202e565b6106875760405162461bcd60e51b815260206004820152602c60248201527f4d696e742070726963652069732065697468657220302e30303120455448206f60448201526b391018902620ab20a1a7a4a760a11b60648201526084016104d1565b610695600780546001019055565b60006106a060075490565b90506106ac3382610db0565b919050565b6106bb3382610dca565b6106d75760405162461bcd60e51b81526004016104d19061204b565b610572838383610e29565b60006106ec610fc5565b60405133904790600081818185875af1925050503d806000811461072c576040519150601f19603f3d011682016040523d82523d6000602084013e610731565b606091505b505080915050806107765760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b60448201526064016104d1565b90565b610572838383604051806020016040528060008152506108ac565b6000818152600260205260408120546001600160a01b03168061039e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104d1565b60006001600160a01b03821661085e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104d1565b506001600160a01b031660009081526003602052604090205490565b610882610fc5565b61088c600061101f565b565b6060600180546103b390611ff4565b6108a8338383611071565b5050565b6108b63383610dca565b6108d25760405162461bcd60e51b81526004016104d19061204b565b6108de8484848461113f565b50505050565b60606108ef82610ce3565b60006108fd600360146120af565b67ffffffffffffffff81111561091557610915611ecf565b60405190808252806020026020018201604052801561095a57816020015b60408051808201909152600080825260208201528152602001906001900390816109335790505b50905060008061096f85610378610309611172565b909250905060015b610983601460036120af565b81116109ee57600080610997858585611172565b91509150604051806040016040528083815260200182815250866001856109be91906120c6565b815181106109ce576109ce6120d9565b6020026020010181905250505080806109e6906120ef565b915050610977565b50604080516020810190915260008082525b6014811015610b8957604080516020810190915260008082525b6003811015610ad05781610a5f8883610a346003886120af565b610a3e9190612108565b81518110610a4e57610a4e6120d9565b602002602001015160000151611192565b610a9a8984610a6f6003896120af565b610a799190612108565b81518110610a8957610a896120d9565b602002602001015160200151611192565b604051602001610aac9392919061211b565b60405160208183030381529060405291508080610ac8906120ef565b915050610a1a565b508281610b0f603b89610ae46003886120af565b81518110610af457610af46120d9565b602002602001015160000151610b0a919061218b565b611192565b610b5160148a610b206003896120af565b81518110610b3057610b306120d9565b602002602001015160000151610b46919061218b565b610b0a906032612108565b604051602001610b64949392919061219f565b6040516020818303038152906040529250508080610b81906120ef565b915050610a00565b50600081604051602001610b9d919061226c565b60405160208183030381529060405290506000610bb982611293565b90506000610c0c610bc98a611192565b604051602001610bd9919061239b565b60408051601f1981840301815290829052610bf89185906020016123d0565b604051602081830303815290604052611293565b905080604051602001610c1f91906124d7565b604051602081830303815290604052975050505050505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610c72610fc5565b6001600160a01b038116610cd75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104d1565b610ce08161101f565b50565b6000818152600260205260409020546001600160a01b0316610ce05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104d1565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d7782610794565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6108a88282604051806020016040528060008152506113e6565b600080610dd683610794565b9050806001600160a01b0316846001600160a01b03161480610dfd5750610dfd8185610c3c565b80610e215750836001600160a01b0316610e1684610436565b6001600160a01b0316145b949350505050565b826001600160a01b0316610e3c82610794565b6001600160a01b031614610ea05760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016104d1565b6001600160a01b038216610f025760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104d1565b610f0d600082610d42565b6001600160a01b0383166000908152600360205260408120805460019290610f369084906120c6565b90915550506001600160a01b0382166000908152600360205260408120805460019290610f64908490612108565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b0316331461088c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d1565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036110d25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104d1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61114a848484610e29565b61115684848484611419565b6108de5760405162461bcd60e51b81526004016104d19061251c565b6000806111868386866103096103e561151a565b91509150935093915050565b6060816000036111b95750506040805180820190915260018152600360fc1b602082015290565b8160005b81156111e357806111cd816120ef565b91506111dc9050600a8361256e565b91506111bd565b60008167ffffffffffffffff8111156111fe576111fe611ecf565b6040519080825280601f01601f191660200182016040528015611228576020820181803683370190505b5090505b8415610e215761123d6001836120c6565b915061124a600a8661218b565b611255906030612108565b60f81b81838151811061126a5761126a6120d9565b60200101906001600160f81b031916908160001a90535061128c600a8661256e565b945061122c565b606081516000036112b257505060408051602081019091526000815290565b60006040518060600160405280604081526020016125dd60409139905060006003845160026112e19190612108565b6112eb919061256e565b6112f69060046120af565b67ffffffffffffffff81111561130e5761130e611ecf565b6040519080825280601f01601f191660200182016040528015611338576020820181803683370190505b509050600182016020820185865187015b808210156113a4576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250611349565b50506003865106600181146113c057600281146113d3576113db565b603d6001830353603d60028303536113db565b603d60018303535b509195945050505050565b6113f08383611554565b6113fd6000848484611419565b6105725760405162461bcd60e51b81526004016104d19061251c565b60006001600160a01b0384163b1561150f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061145d903390899088908890600401612582565b6020604051808303816000875af1925050508015611498575060408051601f3d908101601f19168201909252611495918101906125bf565b60015b6114f5573d8080156114c6576040519150601f19603f3d011682016040523d82523d6000602084013e6114cb565b606091505b5080516000036114ed5760405162461bcd60e51b81526004016104d19061251c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e21565b506001949350505050565b60008060008060006115318a8a8a60018b8b611696565b92509250925061154383838389611718565b945094505050509550959350505050565b6001600160a01b0382166115aa5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104d1565b6000818152600260205260409020546001600160a01b03161561160f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104d1565b6001600160a01b0382166000908152600360205260408120805460019290611638908490612108565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000806000886000036116b057508691508590508461170c565b8860008060015b83156117035760018416156116dd576116d58383838f8f8f8e611787565b919450925090505b6116e860028561256e565b93506116f78c8c8c8c8c611aba565b919d509b5099506116b7565b91955093509150505b96509650969350505050565b60008060006117278585611c5d565b90506000848061173957611739612175565b82830990506000858061174e5761174e612175565b828a0990506000868061176357611763612175565b878061177157611771612175565b8486098a09919a91995090975050505050505050565b6000808089158015611797575088155b156117a9575085915084905083611aad565b861580156117b5575085155b156117c7575088915087905086611aad565b6117cf611d1e565b84806117dd576117dd612175565b898a09815284806117f0576117f0612175565b81518a096020820152848061180757611807612175565b8687096040820152848061181d5761181d612175565b604082015187096060820152604080516080810190915280868061184357611843612175565b60408401518e098152602001868061185d5761185d612175565b60608401518d098152602001868061187757611877612175565b83518b098152602001868061188e5761188e612175565b60208401518a099052604081015181519192501415806118b657506060810151602082015114155b6119025760405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e7374656164000060448201526064016104d1565b61190a611d1e565b858061191857611918612175565b825161192490886120c6565b6040840151088152858061193a5761193a612175565b602083015161194990886120c6565b6060840151086020820152858061196257611962612175565b815180096040820152858061197957611979612175565b815160408301510960608201526000868061199657611996612175565b60608301516119a590896120c6565b88806119b3576119b3612175565b6020850151800908905086806119cb576119cb612175565b87806119d9576119d9612175565b88806119e7576119e7612175565b60408501518651096002096119fc90896120c6565b8208905060008780611a1057611a10612175565b8880611a1e57611a1e612175565b611a28848b6120c6565b8a80611a3657611a36612175565b60408701518851090860208501510990508780611a5557611a55612175565b8880611a6357611a63612175565b6060850151602087015109611a78908a6120c6565b8208905060008880611a8c57611a8c612175565b8980611a9a57611a9a612175565b8b8f098551099297509095509093505050505b9750975097945050505050565b600080600085600003611ad4575086915085905084611c52565b60008480611ae457611ae4612175565b898a09905060008580611af957611af9612175565b898a09905060008680611b0e57611b0e612175565b898a09905060008780611b2357611b23612175565b8880611b3157611b31612175565b848e09600409905060008880611b4957611b49612175565b8980611b5757611b57612175565b8a80611b6557611b65612175565b8586098c098a80611b7857611b78612175565b876003090890508880611b8d57611b8d612175565b8980611b9b57611b9b612175565b838408611ba8908b6120c6565b8a80611bb657611bb6612175565b8384090894508880611bca57611bca612175565b8980611bd857611bd8612175565b8a80611be657611be6612175565b868709600809611bf6908b6120c6565b8a80611c0457611c04612175565b8b80611c1257611c12612175565b611c1c898e6120c6565b860884090893508880611c3157611c31612175565b8980611c3f57611c3f612175565b8c8e096002099497509295509293505050505b955095509592505050565b60008215801590611c6e5750818314155b8015611c7957508115155b611cb65760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210373ab6b132b960911b60448201526064016104d1565b6000600183825b86156113db57611ccd878361256e565b9050828680611cde57611cde612175565b8780611cec57611cec612175565b858409611cf990896120c6565b8608909450925086611d0b81836120af565b611d1590846120c6565b97509150611cbd565b60405180608001604052806004906020820280368337509192915050565b6001600160e01b031981168114610ce057600080fd5b600060208284031215611d6457600080fd5b8135611d6f81611d3c565b9392505050565b60005b83811015611d91578181015183820152602001611d79565b50506000910152565b60008151808452611db2816020860160208601611d76565b601f01601f19169290920160200192915050565b602081526000611d6f6020830184611d9a565b600060208284031215611deb57600080fd5b5035919050565b80356001600160a01b03811681146106ac57600080fd5b60008060408385031215611e1c57600080fd5b611e2583611df2565b946020939093013593505050565b600080600060608486031215611e4857600080fd5b611e5184611df2565b9250611e5f60208501611df2565b9150604084013590509250925092565b600060208284031215611e8157600080fd5b611d6f82611df2565b8015158114610ce057600080fd5b60008060408385031215611eab57600080fd5b611eb483611df2565b91506020830135611ec481611e8a565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611efb57600080fd5b611f0485611df2565b9350611f1260208601611df2565b925060408501359150606085013567ffffffffffffffff80821115611f3657600080fd5b818701915087601f830112611f4a57600080fd5b813581811115611f5c57611f5c611ecf565b604051601f8201601f19908116603f01168101908382118183101715611f8457611f84611ecf565b816040528281528a6020848701011115611f9d57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611fd457600080fd5b611fdd83611df2565b9150611feb60208401611df2565b90509250929050565b600181811c9082168061200857607f821691505b60208210810361202857634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561204057600080fd5b8151611d6f81611e8a565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761039e5761039e612099565b8181038181111561039e5761039e612099565b634e487b7160e01b600052603260045260246000fd5b60006001820161210157612101612099565b5060010190565b8082018082111561039e5761039e612099565b6000845161212d818460208901611d76565b845190830190612141818360208901611d76565b600b60fa1b91018181528451909190612161816001850160208901611d76565b600192019182015260020195945050505050565b634e487b7160e01b600052601260045260246000fd5b60008261219a5761219a612175565b500690565b600085516121b1818460208a01611d76565b703c706f6c79676f6e20706f696e74733d2760781b90830190815285516121df816011840160208a01611d76565b6c04e40ccd2d8d87a4ed0e6d8c25609b1b60119290910191820152845161220d81601e840160208901611d76565b650b0c4c0c094b60d21b601e92909101918201528351612234816024840160208801611d76565b7f252c302e352927207374726f6b653d276e6f6e6527202f3e000000000000000060249290910191820152603c019695505050505050565b7f3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d22555481526523169c111f9f60d11b60208201527f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060268201527f30302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e60468201527f77332e6f72672f313939392f786c696e6b222077696474683d2233353070782260668201527f206865696768743d223335307078222076696577426f783d223020302039393760868201527f2039393722207374796c653d226261636b67726f756e642d636f6c6f723a236660a6820152633333111f60e11b60c68201526000825161237e8160ca850160208701611d76565b651e17b9bb339f60d11b60ca93909101928301525060d001919050565b6c566f6c63616e6f204e4654202360981b8152600082516123c381600d850160208701611d76565b91909101600d0192915050565b693d913730b6b2911d101160b11b815282516000906123f681600a850160208801611d76565b7f222c202261747472696275746573223a205b5d2c20226465736372697074696f600a918401918201527f6e223a2022566f6c63616e6f204e465473206172652072616e646f6d6c792067602a8201527f656e65726174656420696d61676573206f6620616e206572757074696e672076604a8201527f6f6c63616e6f21222c2022696d616765223a2022646174613a696d6167652f73606a8201526d1d99cade1b5b0ed8985cd94d8d0b60921b608a82015283516124bc816098840160208801611d76565b61227d60f01b60989290910191820152609a01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161250f81601d850160208701611d76565b91909101601d0192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008261257d5761257d612175565b500490565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125b590830184611d9a565b9695505050505050565b6000602082840312156125d157600080fd5b8151611d6f81611d3c56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220dd5cdd18f52871a392d3127d4dd2eda4578a346d1213c545bae44721d893352964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101095760003560e01c806370a0823111610095578063a22cb46511610064578063a22cb465146102b2578063b88d4fde146102d2578063c87b56dd146102f2578063e985e9c514610312578063f2fde38b1461033257600080fd5b806370a082311461024a578063715018a61461026a5780638da5cb5b1461027f57806395d89b411461029d57600080fd5b80631249c58b116100dc5780631249c58b146101bf57806323b872dd146101d55780633ccfd60b146101f557806342842e0e1461020a5780636352211e1461022a57600080fd5b806301ffc9a71461010e57806306fdde0314610143578063081812fc14610165578063095ea7b31461019d575b600080fd5b34801561011a57600080fd5b5061012e610129366004611d52565b610352565b60405190151581526020015b60405180910390f35b34801561014f57600080fd5b506101586103a4565b60405161013a9190611dc6565b34801561017157600080fd5b50610185610180366004611dd9565b610436565b6040516001600160a01b03909116815260200161013a565b3480156101a957600080fd5b506101bd6101b8366004611e09565b61045d565b005b6101c7610577565b60405190815260200161013a565b3480156101e157600080fd5b506101bd6101f0366004611e33565b6106b1565b34801561020157600080fd5b5061012e6106e2565b34801561021657600080fd5b506101bd610225366004611e33565b610779565b34801561023657600080fd5b50610185610245366004611dd9565b610794565b34801561025657600080fd5b506101c7610265366004611e6f565b6107f4565b34801561027657600080fd5b506101bd61087a565b34801561028b57600080fd5b506006546001600160a01b0316610185565b3480156102a957600080fd5b5061015861088e565b3480156102be57600080fd5b506101bd6102cd366004611e98565b61089d565b3480156102de57600080fd5b506101bd6102ed366004611ee5565b6108ac565b3480156102fe57600080fd5b5061015861030d366004611dd9565b6108e4565b34801561031e57600080fd5b5061012e61032d366004611fc1565b610c3c565b34801561033e57600080fd5b506101bd61034d366004611e6f565b610c6a565b60006001600160e01b031982166380ac58cd60e01b148061038357506001600160e01b03198216635b5e139f60e01b145b8061039e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103b390611ff4565b80601f01602080910402602001604051908101604052809291908181526020018280546103df90611ff4565b801561042c5780601f106104015761010080835404028352916020019161042c565b820191906000526020600020905b81548152906001019060200180831161040f57829003601f168201915b5050505050905090565b600061044182610ce3565b506000908152600460205260409020546001600160a01b031690565b600061046882610794565b9050806001600160a01b0316836001600160a01b0316036104da5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104f657506104f68133610c3c565b6105685760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016104d1565b6105728383610d42565b505050565b600066038d7ea4c68000341015610687576040516323b872dd60e01b8152336004820152306024820152670de0b6b3a764000060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610626919061202e565b6106875760405162461bcd60e51b815260206004820152602c60248201527f4d696e742070726963652069732065697468657220302e30303120455448206f60448201526b391018902620ab20a1a7a4a760a11b60648201526084016104d1565b610695600780546001019055565b60006106a060075490565b90506106ac3382610db0565b919050565b6106bb3382610dca565b6106d75760405162461bcd60e51b81526004016104d19061204b565b610572838383610e29565b60006106ec610fc5565b60405133904790600081818185875af1925050503d806000811461072c576040519150601f19603f3d011682016040523d82523d6000602084013e610731565b606091505b505080915050806107765760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b60448201526064016104d1565b90565b610572838383604051806020016040528060008152506108ac565b6000818152600260205260408120546001600160a01b03168061039e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104d1565b60006001600160a01b03821661085e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104d1565b506001600160a01b031660009081526003602052604090205490565b610882610fc5565b61088c600061101f565b565b6060600180546103b390611ff4565b6108a8338383611071565b5050565b6108b63383610dca565b6108d25760405162461bcd60e51b81526004016104d19061204b565b6108de8484848461113f565b50505050565b60606108ef82610ce3565b60006108fd600360146120af565b67ffffffffffffffff81111561091557610915611ecf565b60405190808252806020026020018201604052801561095a57816020015b60408051808201909152600080825260208201528152602001906001900390816109335790505b50905060008061096f85610378610309611172565b909250905060015b610983601460036120af565b81116109ee57600080610997858585611172565b91509150604051806040016040528083815260200182815250866001856109be91906120c6565b815181106109ce576109ce6120d9565b6020026020010181905250505080806109e6906120ef565b915050610977565b50604080516020810190915260008082525b6014811015610b8957604080516020810190915260008082525b6003811015610ad05781610a5f8883610a346003886120af565b610a3e9190612108565b81518110610a4e57610a4e6120d9565b602002602001015160000151611192565b610a9a8984610a6f6003896120af565b610a799190612108565b81518110610a8957610a896120d9565b602002602001015160200151611192565b604051602001610aac9392919061211b565b60405160208183030381529060405291508080610ac8906120ef565b915050610a1a565b508281610b0f603b89610ae46003886120af565b81518110610af457610af46120d9565b602002602001015160000151610b0a919061218b565b611192565b610b5160148a610b206003896120af565b81518110610b3057610b306120d9565b602002602001015160000151610b46919061218b565b610b0a906032612108565b604051602001610b64949392919061219f565b6040516020818303038152906040529250508080610b81906120ef565b915050610a00565b50600081604051602001610b9d919061226c565b60405160208183030381529060405290506000610bb982611293565b90506000610c0c610bc98a611192565b604051602001610bd9919061239b565b60408051601f1981840301815290829052610bf89185906020016123d0565b604051602081830303815290604052611293565b905080604051602001610c1f91906124d7565b604051602081830303815290604052975050505050505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610c72610fc5565b6001600160a01b038116610cd75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104d1565b610ce08161101f565b50565b6000818152600260205260409020546001600160a01b0316610ce05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104d1565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d7782610794565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6108a88282604051806020016040528060008152506113e6565b600080610dd683610794565b9050806001600160a01b0316846001600160a01b03161480610dfd5750610dfd8185610c3c565b80610e215750836001600160a01b0316610e1684610436565b6001600160a01b0316145b949350505050565b826001600160a01b0316610e3c82610794565b6001600160a01b031614610ea05760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016104d1565b6001600160a01b038216610f025760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104d1565b610f0d600082610d42565b6001600160a01b0383166000908152600360205260408120805460019290610f369084906120c6565b90915550506001600160a01b0382166000908152600360205260408120805460019290610f64908490612108565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b0316331461088c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d1565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036110d25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104d1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61114a848484610e29565b61115684848484611419565b6108de5760405162461bcd60e51b81526004016104d19061251c565b6000806111868386866103096103e561151a565b91509150935093915050565b6060816000036111b95750506040805180820190915260018152600360fc1b602082015290565b8160005b81156111e357806111cd816120ef565b91506111dc9050600a8361256e565b91506111bd565b60008167ffffffffffffffff8111156111fe576111fe611ecf565b6040519080825280601f01601f191660200182016040528015611228576020820181803683370190505b5090505b8415610e215761123d6001836120c6565b915061124a600a8661218b565b611255906030612108565b60f81b81838151811061126a5761126a6120d9565b60200101906001600160f81b031916908160001a90535061128c600a8661256e565b945061122c565b606081516000036112b257505060408051602081019091526000815290565b60006040518060600160405280604081526020016125dd60409139905060006003845160026112e19190612108565b6112eb919061256e565b6112f69060046120af565b67ffffffffffffffff81111561130e5761130e611ecf565b6040519080825280601f01601f191660200182016040528015611338576020820181803683370190505b509050600182016020820185865187015b808210156113a4576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250611349565b50506003865106600181146113c057600281146113d3576113db565b603d6001830353603d60028303536113db565b603d60018303535b509195945050505050565b6113f08383611554565b6113fd6000848484611419565b6105725760405162461bcd60e51b81526004016104d19061251c565b60006001600160a01b0384163b1561150f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061145d903390899088908890600401612582565b6020604051808303816000875af1925050508015611498575060408051601f3d908101601f19168201909252611495918101906125bf565b60015b6114f5573d8080156114c6576040519150601f19603f3d011682016040523d82523d6000602084013e6114cb565b606091505b5080516000036114ed5760405162461bcd60e51b81526004016104d19061251c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e21565b506001949350505050565b60008060008060006115318a8a8a60018b8b611696565b92509250925061154383838389611718565b945094505050509550959350505050565b6001600160a01b0382166115aa5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104d1565b6000818152600260205260409020546001600160a01b03161561160f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104d1565b6001600160a01b0382166000908152600360205260408120805460019290611638908490612108565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000806000886000036116b057508691508590508461170c565b8860008060015b83156117035760018416156116dd576116d58383838f8f8f8e611787565b919450925090505b6116e860028561256e565b93506116f78c8c8c8c8c611aba565b919d509b5099506116b7565b91955093509150505b96509650969350505050565b60008060006117278585611c5d565b90506000848061173957611739612175565b82830990506000858061174e5761174e612175565b828a0990506000868061176357611763612175565b878061177157611771612175565b8486098a09919a91995090975050505050505050565b6000808089158015611797575088155b156117a9575085915084905083611aad565b861580156117b5575085155b156117c7575088915087905086611aad565b6117cf611d1e565b84806117dd576117dd612175565b898a09815284806117f0576117f0612175565b81518a096020820152848061180757611807612175565b8687096040820152848061181d5761181d612175565b604082015187096060820152604080516080810190915280868061184357611843612175565b60408401518e098152602001868061185d5761185d612175565b60608401518d098152602001868061187757611877612175565b83518b098152602001868061188e5761188e612175565b60208401518a099052604081015181519192501415806118b657506060810151602082015114155b6119025760405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e7374656164000060448201526064016104d1565b61190a611d1e565b858061191857611918612175565b825161192490886120c6565b6040840151088152858061193a5761193a612175565b602083015161194990886120c6565b6060840151086020820152858061196257611962612175565b815180096040820152858061197957611979612175565b815160408301510960608201526000868061199657611996612175565b60608301516119a590896120c6565b88806119b3576119b3612175565b6020850151800908905086806119cb576119cb612175565b87806119d9576119d9612175565b88806119e7576119e7612175565b60408501518651096002096119fc90896120c6565b8208905060008780611a1057611a10612175565b8880611a1e57611a1e612175565b611a28848b6120c6565b8a80611a3657611a36612175565b60408701518851090860208501510990508780611a5557611a55612175565b8880611a6357611a63612175565b6060850151602087015109611a78908a6120c6565b8208905060008880611a8c57611a8c612175565b8980611a9a57611a9a612175565b8b8f098551099297509095509093505050505b9750975097945050505050565b600080600085600003611ad4575086915085905084611c52565b60008480611ae457611ae4612175565b898a09905060008580611af957611af9612175565b898a09905060008680611b0e57611b0e612175565b898a09905060008780611b2357611b23612175565b8880611b3157611b31612175565b848e09600409905060008880611b4957611b49612175565b8980611b5757611b57612175565b8a80611b6557611b65612175565b8586098c098a80611b7857611b78612175565b876003090890508880611b8d57611b8d612175565b8980611b9b57611b9b612175565b838408611ba8908b6120c6565b8a80611bb657611bb6612175565b8384090894508880611bca57611bca612175565b8980611bd857611bd8612175565b8a80611be657611be6612175565b868709600809611bf6908b6120c6565b8a80611c0457611c04612175565b8b80611c1257611c12612175565b611c1c898e6120c6565b860884090893508880611c3157611c31612175565b8980611c3f57611c3f612175565b8c8e096002099497509295509293505050505b955095509592505050565b60008215801590611c6e5750818314155b8015611c7957508115155b611cb65760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210373ab6b132b960911b60448201526064016104d1565b6000600183825b86156113db57611ccd878361256e565b9050828680611cde57611cde612175565b8780611cec57611cec612175565b858409611cf990896120c6565b8608909450925086611d0b81836120af565b611d1590846120c6565b97509150611cbd565b60405180608001604052806004906020820280368337509192915050565b6001600160e01b031981168114610ce057600080fd5b600060208284031215611d6457600080fd5b8135611d6f81611d3c565b9392505050565b60005b83811015611d91578181015183820152602001611d79565b50506000910152565b60008151808452611db2816020860160208601611d76565b601f01601f19169290920160200192915050565b602081526000611d6f6020830184611d9a565b600060208284031215611deb57600080fd5b5035919050565b80356001600160a01b03811681146106ac57600080fd5b60008060408385031215611e1c57600080fd5b611e2583611df2565b946020939093013593505050565b600080600060608486031215611e4857600080fd5b611e5184611df2565b9250611e5f60208501611df2565b9150604084013590509250925092565b600060208284031215611e8157600080fd5b611d6f82611df2565b8015158114610ce057600080fd5b60008060408385031215611eab57600080fd5b611eb483611df2565b91506020830135611ec481611e8a565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611efb57600080fd5b611f0485611df2565b9350611f1260208601611df2565b925060408501359150606085013567ffffffffffffffff80821115611f3657600080fd5b818701915087601f830112611f4a57600080fd5b813581811115611f5c57611f5c611ecf565b604051601f8201601f19908116603f01168101908382118183101715611f8457611f84611ecf565b816040528281528a6020848701011115611f9d57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611fd457600080fd5b611fdd83611df2565b9150611feb60208401611df2565b90509250929050565b600181811c9082168061200857607f821691505b60208210810361202857634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561204057600080fd5b8151611d6f81611e8a565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761039e5761039e612099565b8181038181111561039e5761039e612099565b634e487b7160e01b600052603260045260246000fd5b60006001820161210157612101612099565b5060010190565b8082018082111561039e5761039e612099565b6000845161212d818460208901611d76565b845190830190612141818360208901611d76565b600b60fa1b91018181528451909190612161816001850160208901611d76565b600192019182015260020195945050505050565b634e487b7160e01b600052601260045260246000fd5b60008261219a5761219a612175565b500690565b600085516121b1818460208a01611d76565b703c706f6c79676f6e20706f696e74733d2760781b90830190815285516121df816011840160208a01611d76565b6c04e40ccd2d8d87a4ed0e6d8c25609b1b60119290910191820152845161220d81601e840160208901611d76565b650b0c4c0c094b60d21b601e92909101918201528351612234816024840160208801611d76565b7f252c302e352927207374726f6b653d276e6f6e6527202f3e000000000000000060249290910191820152603c019695505050505050565b7f3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d22555481526523169c111f9f60d11b60208201527f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060268201527f30302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e60468201527f77332e6f72672f313939392f786c696e6b222077696474683d2233353070782260668201527f206865696768743d223335307078222076696577426f783d223020302039393760868201527f2039393722207374796c653d226261636b67726f756e642d636f6c6f723a236660a6820152633333111f60e11b60c68201526000825161237e8160ca850160208701611d76565b651e17b9bb339f60d11b60ca93909101928301525060d001919050565b6c566f6c63616e6f204e4654202360981b8152600082516123c381600d850160208701611d76565b91909101600d0192915050565b693d913730b6b2911d101160b11b815282516000906123f681600a850160208801611d76565b7f222c202261747472696275746573223a205b5d2c20226465736372697074696f600a918401918201527f6e223a2022566f6c63616e6f204e465473206172652072616e646f6d6c792067602a8201527f656e65726174656420696d61676573206f6620616e206572757074696e672076604a8201527f6f6c63616e6f21222c2022696d616765223a2022646174613a696d6167652f73606a8201526d1d99cade1b5b0ed8985cd94d8d0b60921b608a82015283516124bc816098840160208801611d76565b61227d60f01b60989290910191820152609a01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161250f81601d850160208701611d76565b91909101601d0192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008261257d5761257d612175565b500490565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125b590830184611d9a565b9695505050505050565b6000602082840312156125d157600080fd5b8151611d6f81611d3c56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220dd5cdd18f52871a392d3127d4dd2eda4578a346d1213c545bae44721d893352964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 827,
        "contract": "contracts/VolcanoNFT.sol:VolcanoNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 829,
        "contract": "contracts/VolcanoNFT.sol:VolcanoNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 833,
        "contract": "contracts/VolcanoNFT.sol:VolcanoNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 837,
        "contract": "contracts/VolcanoNFT.sol:VolcanoNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 841,
        "contract": "contracts/VolcanoNFT.sol:VolcanoNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 847,
        "contract": "contracts/VolcanoNFT.sol:VolcanoNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/VolcanoNFT.sol:VolcanoNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3696,
        "contract": "contracts/VolcanoNFT.sol:VolcanoNFT",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)2199_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2199_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2198,
            "contract": "contracts/VolcanoNFT.sol:VolcanoNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}